name: Code Analysis

on:
  push:
    branches:
      - main
      - copilot
      - codeium
      - codewhisperer
      - gemini
      - chatgpt
      - claude_code
      - bolt_new
      - openhands
      - intellj_ai_assist
  pull_request:
    branches:
      - main

jobs:
  static-analysis:
    name: SonarQube & Snyk Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache SonarQube Packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: 6327b63af0d71a5f907d4bbb1106935f055cbc7d
          SONAR_HOST_URL: "https://sonarcloud.io"
        run: |
          mvn clean verify sonar:sonar \
            -Dsonar.projectKey=IA_TESTING \
            -Dsonar.organization=testes-ia \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Install Snyk CLI
        run: |
          curl -Lo snyk https://github.com/snyk/snyk/releases/latest/download/snyk-linux
          chmod +x snyk
          mv snyk /usr/local/bin/

      - name: Run Snyk Code Analysis
        env:
          SNYK_TOKEN: e648e127-726d-4ec5-8bcd-9a6c28c508c8
        run: |
          snyk code test --severity-threshold=high

  ai-review:
    name: AI Code Review (Gemini & ChatGPT)
    runs-on: ubuntu-latest
    needs: static-analysis

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Review Code with Gemini
        run: |
          CODE_CONTENT=$(find src/main/java/br/com/example -name "*.java" -exec cat {} + | jq -sR . | tr -d '\n')
          curl -X POST "https://generativelanguage.googleapis.com/v1/models/gemini-1.5-pro:generateContent?key=${{ secrets.GEMINI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"contents\": [{\"role\": \"user\", \"parts\": [{\"text\": "Revise este código e sugira melhorias: "+$CODE_CONTENT}]}]
            }"

      - name: Review Code with ChatGPT
        run: |
          CODE_CONTENT=$(find src/main/java/br/com/example -name "*.java" -exec cat {} + | jq -Rs .)
          curl -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"model\": \"gpt-4\",
              \"messages\": [{\"role\": \"user\", \"content\": "Revise este código e sugira melhorias: " + $CODE_CONTENT}]
            }"

